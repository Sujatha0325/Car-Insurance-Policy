import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 1: Generate Random Data
def generate_random_data(num_samples=1000):
    np.random.seed(42)  # For reproducibility
    data = {
        'PolicyID': np.arange(1, num_samples + 1),
        'CarAge': np.random.randint(0, 20, num_samples),  # Age of the car in years
        'SafetyRating': np.random.uniform(1, 5, num_samples),  # Safety rating from 1 to 5
        'PremiumAmount': np.random.randint(300, 1500, num_samples),  # Annual premium
        'Claimed': np.random.choice([0, 1], num_samples, p=[0.9, 0.1])  # 10% chance of claiming
    }
    df = pd.DataFrame(data)
    df.to_csv('car_insurance_data.csv', index=False)
    print("Random data generated and saved to 'car_insurance_data.csv'.")

# Step 2: Load and Preprocess Data
def load_and_preprocess_data():
    df = pd.read_csv('car_insurance_data.csv')
    print("\nData Loaded:")
    print(df.head())
    
    # Feature selection
    features = ['CarAge', 'SafetyRating', 'PremiumAmount']
    target = 'Claimed'
    
    X = df[features]
    y = df[target]
    
    return X, y

# Step 3: Train a Predictive Model
def train_model(X, y):
    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    
    # Initialize the model
    model = LogisticRegression()
    
    # Train the model
    model.fit(X_train, y_train)
    
    # Make predictions
    y_pred = model.predict(X_test)
    
    return y_test, y_pred

# Step 4: Evaluate the Model
def evaluate_model(y_test, y_pred):
    accuracy = accuracy_score(y_test, y_pred)
    conf_matrix = confusion_matrix(y_test, y_pred)
    class_report = classification_report(y_test, y_pred)
    
    print(f'\nAccuracy: {accuracy:.2f}')
    print('Confusion Matrix:')
    print(conf_matrix)
    print('Classification Report:')
    print(class_report)

# Main execution
if __name__ == "__main__":
    generate_random_data()  # Step 1: Generate random data
    X, y = load_and_preprocess_data()  # Step 2: Load and preprocess data
    y_test, y_pred = train_model(X, y)  # Step 3: Train the model
    evaluate_model(y_test, y_pred)  # Step 4: Evaluate the model
